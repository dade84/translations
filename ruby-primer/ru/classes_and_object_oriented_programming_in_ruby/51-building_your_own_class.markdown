# 5.1 Создание своих собственных классов #

## Getting classy ##

Давайте начнем с создания самого настоящего нашего класса. Конечно, классу нужна работа или роль, которые экземпляры будут воплощать или у нас нет причин чтобы создать его. Давайте начнем с создания класса, который будет представлять простой геометрический прямоугольник Rectangle.

Как вы уже заметили, имена классов в Ruby начинаются с заглавной буквы. У этого соглашения есть другие значения, которые мы тщательно рассмотрим позже - а сейчас, у всех наших классов имена начинаются с заглавной буквы.

	class Rectangle
	end

Этот класс пока еще не завершен. Классу, чтобы оправдать свое существование необходимо иметь две определенный особенности:

	1. Состояние (state)
	Класс должен иметь различные виды состояний, которые определены аттрибутами экземпляров. В случае с простым прямоуг	ольником, это может быть его длина и ширина.

	2. Поведение
	Класс также должен делать что-то важное. Это достигается добавлением методов в класс программистом которые взаимодействовуют с состояниями класса чтобы дать нам важные результаты.

## Состояние и поведение ##

Чему равен твой периметр? и Чему равна твоя площадь? звучат как интересные вопросы чтобы спросить у прямоугольника. Это поведение будет определяться методами класса Rectangle. Начав с поведения и работой в обратном направлении это отличный способ чтобы точно понять какое состояние нам нужно, то к чему мы обратимся в слудеющем разделе. Поскольку вы впервые создаете метод, позвольте мне продемонстрировать это для вас с периметром и затем вы можете попробовать добавить сами площадь.

	class Rectangle
	  def perimeter
	  end
	end

Ключевое слово def это то, что мы используем для того, чтобы создать метод называемый perimeter.  Вы заметите, что Ruby следует соглашению с отступом в два пробела и раздел кода как правило закрывается используя ключевое слово end. Обратите внимание, что оба класс и метод закрываются таким же образом. Конечно класс все еще ничего не делает, потому что у нас класс без состояния с пустым методом. Давайте сейчас попробуем заполнить этот пустой метод формулой для периметра прямоугольника, который равен 2*(length + breadth).

	class Rectangle
	  def perimeter
	    2 * (@length + @breadth)
	  end
        end

Обратите внимание, что переменные с именами length и breadth имеют символ @ вставленные перед ними. Это соглашение, которое определяет их как часть состояния класса или если использовать жаргон, переменные экземпляра класса. Это означает, что каждый экземпляр класса Rectangle будет иметь свою собственную копию этих переменных и действовать как различные прямоугольники.

	Если на самом деле выполнить этот код, все таки вы увидите, что он не выполнится. Попробуем добавить Rectangle.new.perimeter в конец предыдущего примера. Смотрите, что происходит? У @length и @breadth все еще нет значений потому что у нас нет способа, чтобы инициализировать их. Давайте это сейчас исправим.

	class Rectangle
  	 def initialize(length, breadth)
   	   @length = length
   	   @breadth = breadth
  	 end

  	 def perimeter
   	  2 * (@length + @breadth)
  	 end
	end  

Наблюдайте за тестами для этой части кода тщательно - вы заметите, что мы сейчас можем создавать экземпляры Rectangle, которые точно сообщают нам о своем периметре.

Сейчас ваша очередь - расширим этот класс, чтобы добавить метод, которые вычисляет площадь используя формулу length * breadth.

	class Rectangle
  	  def initialize(length, breadth)
    	    @length = length
    	    @breadth = breadth
  	  end

  	  def perimeter
    	    2 * (@length + @breadth)
  	  end

  	  #write the 'area' method here
  	  def area
    	    @length * @breadth
  	  end
	end

