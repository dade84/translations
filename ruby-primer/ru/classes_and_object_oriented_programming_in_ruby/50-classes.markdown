# 5.0 Классы #

## Группировка объектов ##

Сейчас можно задаться вопросом, что если все объекты одинаковые. Являются ли группы, которые мы уже рассмотрели - числами, строками, массивами, поддерживаемые языком Ruby?

На деле Ruby позволяют определить группы объектов или чтобы использовать объектно-ориентированный жаргон, классы объектов.

Можно искать класс любого объекта просто вызвав метод class на нем. Давайте попытаемся это сделать с несколькими объектами, с которыми мы уже знакомы.

	puts 1.class
	puts "".class
	puts [].class

Как видим, Ruby говорит нам то, что мы уже предположили - 1 это Fixnum(специальный вид Integer), "" это String и [] это Array.

Мы также можем подойти к этому вопросу с другой стороны. Тут мы спрашиваем, является ли is_a? объект конкретным классом. 

	puts 1.is_a?(Integer)
	puts 1.is_a?(String)

## Классы тоже объекты ##

Важная особенность классов в Ruby в том, что они тоже придерживаются философии того, что все является объектом. Это может быть интересно тем, кто уже знаком с C++ и подобными языками где классы это специальная конструкция, с которыми нельзя взаимодействовать как с обычными объектами. 

Таким образом, в Ruby, сами классы тоже объекты, которые принадлежат классу Class. Вот простой пример, который демонстрирует этот факт:

	1.class.class

## Что делают классы? ##

Следующий логичный вопрос это конечно, классы ведут себя как логические группы или они на самом деле что-то делают?

В Ruby, как и в других, основанных на классах объектно-ориентированных языках, с которымы ты может уже знаком, классы ведут себя как фабрики, которые производят объекты. Объект который построен определенным классом называется экземпляром этого класса. Как правило вызов метода new класса приводит к созданию экземляра.

Давайте создадим экземпляр самого основного вида объекта путем вызова метода new объекта Object.

	Object.new

Этот объект или экземпляр, если быть более точным - не может сделать очень многое. Тем не менее, экземпляры более мощных классов как Arrays и Strings могут сделать намного больше, как мы увидим в других уроках. Вы также изучите, как создавать свои собственные классы, которые вы сможете использовать чтобы строить большие и более мощные программы.




	
