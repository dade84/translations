# 2.0 Логические выражения в Ruby #

## Выражения в Ruby. Руководство для начинающих ##

Ruby использует оператор двойного равенства == для сравнения двух объектов.

Давайте попробуем простое упражнение: напишите выражение, которое проверяет является ли значение переменной name 'Bob'-ом.

	name == 'Bob'
	
Другие распространенные операторы как >, < , >= и т.д. поддерживаются. Следующее упражнение написать выражение, которое проверяет является ли age <= 35.

	age <= 35

Логические выражения как выше всегда возвращают или true или false объекты.


## Объединение выражений используя && и || операторы  ##

Вы можете использовать ключевые слова || (читается как 'или'), && (читается как 'и') для объединения выражений. Попробуйте изменить следующее выражение чтобы проверить является ли age больше или равен 23 и является ли name или 'Bob'-ом или 'Jill'-ом.

	age >= 23 && (name == 'Bob' || name == 'Jill')

Также как порядок операторов в математических выражениях (PEMDAS), у Ruby также есть набор правил управляющие приоритетом различных операторов. Тем не менее это не то о чем тебе необходимо сейчас беспокоиться. Просто убедись, чтобы использовать скобки щедро так чтобы порядок операций является однозначным для Ruby а также для тех, кто читает твой код.


## Отрицание выражений ##

Ruby позволяет отрицать выражения используя оператор ! (читается как 'не'). Например, ! (name == 'Jill') вернет false если name является 'Jill' и true в остальных случаях.   

Сейчас попробуйте написать простое выражение, которое принимает любое name кроме 'Bob'

	!(name == 'Bob')

Здорово! Сейчас вы изучили основы написания логических выражений в Ruby, давайте посмотрим как мы можем использовать их для того, чтобы определить последовательность выполнения нашего приложения в следующем уроке.	

