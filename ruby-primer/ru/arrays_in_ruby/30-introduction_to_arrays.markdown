# 3.0 Введение в Arrays #

## Пустые массивы ##

Это просто чем ты думаешь.
[] уже ввели в редакторе кода. Это то как ты создаешь массив.

	[]

Также можно сделать тоже самое через Array.new
	
	Array.new

## Создание массивов ##

Вы можете создать массив со множеством значений просто помещая их внутрь [] вот так: [1, 2, 3].
Попытайтесь создать массив с числами от 1 до 5, включительно.

	[1, 2, 3, 4, 5]

Массивы в Ruby позволяют тебе сохранить любые виды объектов в любом сочетании без ограничений на тип.
Таким образом, символьный массив [1, 'one', 2, 'two'] смешивает Integers и String и это вполне допустимо.

## Поиск данные в Arrays ##

Искать значения в массиве - легко сделать с использованием index. Как и большинство языков, в массивах Ruby есть индексы, начинающиеся с 0. Пример ниже демонстрирует как искать третье значение в массиве.

	[1, 2, 3, 4, 5][2]

Теперь ваша очередь извлечь пятое значение из массива ниже. Запомните то, что n-ое значение в массиве имеет индекс n-1.

	[1, 2, 3, 4, 5, 6, 7][4]               

Индексы массива также могут начинаться с конца массива, а не с начала! В Ruby это достигается с использование отрицательных чисел. Это называется индекс обратного поиска. В этом случае, значения индекса начинаются с -1 и становятся меньше. Пример ниже возвращает первое значение массива.

	[1, 2, 3, 4, 5][-5]

Двигайся вперед и попытайся извлечь последнее значение из массива ниже.

	[1, 2, 3, 4, 5][-1]    


## Расширяемы массивы ##

В Ruby размер массива не фиксирован. Также, любой объект любого типа может быть добавлен в массив, не только числа. Как насчет того чтобы добавить в конец массива String "woot"? Попробуй использовать << это функция 'append', чтоб добавить в массив ниже.

	[1, 2, 3, 4, 5] << "woot"

В отличие от других языков, в Ruby ты всегда найдешь множество способов чтобы выполнить одно и тож действие. Чтобы добавить в конец новый элемент в данный массив, ты можешь также использовать push метод массива. Добавь строку "woot" в данный массив вызвав push.

	[1, 2, 3, 4, 5].push("woot")

Использование '<<' наиболее распространенный метод, чтобы добавить элемент в Array. Существуют также другие способы, но мы коснемся их позже.
 
                                                                                         

