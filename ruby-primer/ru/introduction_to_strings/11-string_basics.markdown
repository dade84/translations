# 1.1 Основы String #

## Вставка в String ##

Важно чтобы была возможность заменить метки-заполнители значениями, которые они представляют. В парадигме программирования, это называется "вставка в строку". В Ruby, вставка в строку чрезвычайно легкий. Не стесняйтесь запустить пример ниже, чтобы увидеть его в действии.

	a = 1
	b = 4
	puts "The number #{a} is less than #{b}"  #=> The number 1 is less than 4

Запомните, что метки-заполнители не только для переменных. Любой допустимый блок Ruby кода, который вы вставляете в #{} будет выполнен и вставлен в это местоположение. Не очень ясно?

Сейчас давайте посмотрим как вы владеете этим инструментом. Завершите функциональные возможности метода ниже, которому дана String как аргумент, вставьте длину этой String в другую String:

	def string_length_interpolater(incoming_string)
	  "The string you just gave me has a length of #{incoming_string.length}"
	end

Мы использовали двойные кавычки во всех наших примерах со вставкой строк. String литерал созданный одинарными кавычками не поддерживает вставку.

Существенное отличие между использование одинарных или двойных кавчках в том, что двойные кавычки создают возможности для управляющих последовательностей в то время как одиночные кавычки нет. Как вы видели выше один из таких примеров "\n" воспринимается как новая строка и появляется как новая строка когда визуализируется пользователю, в то время как '\n' отображает саму управляющую последовательность пользователю.
Давайте продолжим...  	
                                            "
## Поиск в String ##

Другой обычный сценарий - проверка содержит ли String любой заданные символ, слово или подстроку.
Принимая во внимание твой опыт с Ruby API и его интуитивность, попробуйте проверить String данную ниже содержит ли оно 'Yoda'.

	"[Luka:] I can't believe it. [Yoda:] That is why you fail."
	"[Luka:] I can't believe it. [Yoda:] That is why you fail.".include?('Yoda')

Удалось ли вам сделать это самостоятельно? Слишком много поваров портят бульон, в то время как слишком много советов сбивают охотника с пути! Сейчас проверим начинается ли строка ниже с 'Ruby'.

	"Ruby is a beautiful language"
	"Ruby is a beautiful language".starts_with?('Ruby')

После этого, проверка заканчивается ли утверждение ниже с 'Ruby' должно быть легко.

	"I can't work with any other language but Ruby"
	"I can't work with any other language but Ruby".ends_with?('Ruby')

Вы освоили Ruyb API? Предыдущие три метода все оканчивались с '?' В Ruby принято иметь '?' в конце методов если этот метод возвращает логическое значение.
Хотя это не регламентируется синтаксисом, такая практика настоятельно реккомендуется, так как это увеличивает читаемость кода.

Иногда нам будет необходимо узнать индекс конкретного символа или подстроки заданной String и очень удобно то, что Ruby предоставляет метод String, который делает именно это.
Попробуйте узнать индекс 'R' в строке ниже:

	"I am a Rubiest".index('R')

## Изменение регистра String ##

Последняя вещь которую мы будем рассматривать в этом уроке это управление регистром строк. Ruby предоставляет удобный инструментарий чтобы заботиться о правильной и последовательной оболочке в пределах строк. Давайте начнем с преобразование строки из нижнего регистра в верхний регистр.

	puts 'i am in lovercase.upcase #=> 'I AM IN LOVERCASE'

Подобно этому, можно преобразовать строку в нижний регистр. Ruby вызывает метод downcase. Преобразуем строку ниже в нижний регистр.

	'This is Mixed CASE'.downcase #=> 'this is mixed case'

На прощальной ноте, давайте затронем интересный метод. Когда вы сталкиваетесь со строкой со смешанным регистром, Ruby предоставляет способ, чтобы обменивать регистром каждого символа, например этот метод может преобразовать  "I Am MixEd" в "i aM mIXeD". Попробуйте выяснить этот метод и рассказать нам, если вы когда-либо сталкивались с этим сценарием, где вы найдете применение для этого. Можно сделать хорошую историю для дождливой ночи!

	"ThiS iS A vErY ComPlEx SenTeNcE".swapcase 






