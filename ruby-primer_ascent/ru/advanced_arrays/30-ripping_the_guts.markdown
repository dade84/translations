# 3.0 Ripping the Guts #

## Lining 'em up #

Вы уже завершили основу introduction to Arrays и готовы погрузиться глубже. Эта глава рассматривает Ruby Array в некоторых деталях, и демонстрирует техники создания и управления массивами.

## Destructurin' ##

Если вы достигли этого места на RubyMonk, вы возможно сталкивались с выражением такое как это.

	zen, life = [42,43]

Это деструктурирование. Мы разделили массив и присвоили его значения переменным zen и life.

Это равнозначно использованию [] или метода at для того, чтобы извлечь значения, давая хорошее сокращение для последовательного разделения массива.

	array = [42,43]
	zen = array[0]
	life = array.at(1)

	puts zen
	puts life

Что произойдет когда один окажется многомерный массивом? Многомерный массив является n-элементным массивом в границах массива. Каждый элемент массива также является массивом из n элементнов. 

	zen, john = [[4,8],[3,16],[23,42,15]]

	p zen
	p john

zen и john ожидаемя отберут первые два внутренних массива.

Также возможно написать функцию и использовать ее как способ моделирования возвращаемого значения. На практике, это редко необходимо. Но итересно знать, что вы можете!

	def zen
	  [42,true]
	end

	x,y = zen

	puts x
	puts y

Все это достаточно ясно. Что еще приятнее, что вы можете использовать их внутри блоков.

	[[1,2,3,4],[42,43]].each {|a,b| puts "#{a} #{b}"}

Это равносильно деструктуризации их вручную внутри блоков место аргументов блока.

	[[1,2,3,4],[42,43]].each do |element|
	  a, b = element
	  puts "#{a} #{b}"
	end

Завершите этот метод для того чтобы вернуть массив. Метод принимает только двумерный массив. Элементы массива, которые возвращает этот метод являются суммой первых двух элементов каждого внутреннего массива в двумерном массиве, который передается.

	def compute(ary)
	  ary.map {|a,b| ((a.nil?) ? 0 : a) + ((b.nil?) ? 0 : b)} if ary
	end

Если вы обратили внимание в примере выше, деструкция массива является немного ограниченной.

	zen, life, more = [42, 43]

	puts zen
	puts life
	p more

В примере выше, more игнорируется и ей просто присвается nil, потому что мы за пределами элементов массива.

## Звездочка ##

В Ruby есть более специальный доступ деструктуризации используя оператор splat(*)(звездочка).

	car, *cdr = [42,43,44]







