# 0.0 Введение в Блоки #

## Погружение в блоки ##

Часто первым рубизмом с которым сталкивются рубисты являются блоки что и сбивает их с толку. Что такое блоки? Почему они существуют? Как я могу использовать их?

Я постараюсь ответить на все эти и другие вопросы в этом уроке.

## Что такое блоки? ##

Блоки не являются чем-то уникальным для Ruby. Официальное(языко-независимое) определение блоков это "Часть кода, которая сгруппирована вместе". Конечно, Я предполагаю, что это не очень помогает.

Самый простой способ описать блоки это "Блок это код, который можно сохранить в переменной как и любой другой объект и выполнить по запросу".

Позвольте мне помочь вам создать мысленную модель для них, показав вам некоторый код, затем преобразовать его в блок Ruby. Мы можем начать с написания некоторого кода, которые делает что-то обычное, но важное.

Может быть сложить два числа?

	puts 5 + 6

Это работае! Тем не менее, это охватывает только первую часть определения - блок это часть кода. Он также не "сгруппирован вместе" и не сохранен в переменной.

Давайте поработаем над кодом еще немного, чтобы сделать его более примечательным до того как мы "сгруппируем его".

	a = 5
	b = 6
	puts a + b

Здорово. Мы заменили числа переменными. Код, который осуществляет сложение, тем не менее, все еще не сохранен в переменной.

Давайте сделаем это!

	addition = lambda{|a,b| return a + b}
	  or
	addition = ->(a,b){return a + b}
	puts additon.call(5,6)

И теперь это блок!

Ключевое слово "lambda" это то, что наиболее часто используется для того, чтобы создать блок в Ruby. Есть и другие способы сделать это, но давайте не будем усложнять сейчас.

Сейчас, если ты думаешь "Подождите, они выглядят почти как методы, если не считать, что у него не существует класса или объекта", тогда вы абсолютно правы. Попробуйте думать о них таким образом: Блок похож на метод, но он не связан ни с одним объектом.

Давайте рассмотрим блоки ближе.

Блоки являются объектами? Да, как и почти все остальное в Ruby.

	empty_block = lambda {}
	puts empty_block.object_id
	puts empty_block.class
	puts empty_block.class.superclass


Как видите, блоки, которые мы только что создали имеют object_id, который принадледит классу Proc(а именно то, что блоком называют в Ruby), именно сам производный класс от Object.

Мы можем даже перевернуть определение и определить методы говоря языком блоков. Метод это просто блок, связанный с объектом, с доступом к состоянию объекта.

Позвольте мне наглядно показать воспроизведя Ruby метод для того, чтобы произвести блок. Вот наиболее общепринятый подход к предыдущей проблеме ( и пожалуйста забудьте мое поршивое моделирование объекта):

	class Calculator
	  def add(a,b)
	    return a + b
	  end
	end

	puts Calculator.new.add(5,6)

Так, это работает как ты и ожидал. Сейчас давайте пойдем дальше.

	class Calculator
	  def add(a, b)
	    return a + b
	  end
	end

	addition_method = Calculator.new.method("add")
	addition = addition_method.to_proc

	puts addition.call(5,6)

	Вот такие дела - обычный, старомодный метод для преобразования в блок!
	Сейчас ваша очередь! В следующем разделе, мы раскроем эту проблему упражнением, для того, чтобы ты узнал что-то новое.


## Помещай свой код в Блок! ##

Давайте построим четыре блока по однму для сложения, вычитания, умножения и деления. Каждый блок должен принимать два значения, выполнить операцию и вернуть результат этой операции.

Мы уже сделали сложение, не стесняйтесь использовать его как пример для остальных.


	Addition = lambda {|a, b| return a + b }
	Subtraction = lambda {|a,b| return a - b }
	Multiplication = lambda {|a,b| return a * b }
	Division = lambda {|a,b| return a / b }


