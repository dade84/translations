#  0.4 Blocks, Procs и Lamdas #

## Lambda vs. Proc ##

Блоки в Ruby имели довольно сложную историю, которая означает, что терминология становится сложной(непонятной), и имеется небольшая горсточка пограничных случаев, о которых тебе необходимо знать.

Я уже упоминал как Proc, Block и Lambda часто используются как синонимы в Ruby и это хорошо, большую часть времени. Давайте попытаемся понять, что каждый элемент(термин) на самом деле означает и в чем разница между ними, если они имеются.

Примечание: Этот раздел предназначен только для Ruby 1.9.x и не относится к Ruby 1.8.x.

	Пример кода:
	puts lambda {}
	puts Proc.new {}

Как видите, оба подхода производят экземпляр класса Proc, несмотря на то, что один создан используя lambda явно отличается словом "lambda" в скобках - необычное отклонение от нормы.

## Чем отличаются эти объекты? ##

Блок, созданный с lambda ведет себя как метод, когда вы используете return и просто выходит из блока, передавая управление назад вызывающему методу.

Блок, созданный с Proc.new ведет себя как часть вызывающего метода, когда return используется внутри и выходит как из самого блока, так и из вызывающего метода.

Тут пример, которые используют lambda - return внутри блока передают управление методу.

	def a_method
	  lambda { return "we just returned from the block" }.call
	  return "we just returned from the calling method"
	end

	puts a_method

Вот пример, который используют Proc.new - return внутри блока выходит не только из самого блока, но также и из окружающего его метода.

	def a_method
	  Proc.new { return "we just returned from the block" }.call
	  return "we just return from the calling method"
	end

	puts a_method

Как следствие, Proc.new это что-то, что почти никогда не используется явно чтобы создать блоки из-за неожиданной семантики return. Реккомендуется избегать использовать эти формы и использовать если они действительно необходимы.

## Выбор, выбор ##

Давайте подведем итог всех различных способов, которыми могут быть созданы блоки в Ruby, которые мы изучили на сегодняшний день.


1. Неявно когда вызывается метод
2. Явно, используя метод Kernel#lambda
3. Явно, используя Proc.new

Оба(2) и (3) имеют альтернативный синтаксис доступный для того, чтобы создать сжатый(краткий) код. Следующие 2 строчки производят одинаковый результат.

	short = ->(a,b) {a + b}
	puts short.call(2,3)

	long = lambda {|a,b| a + b}
	puts long.call(2,3)


Метод Kernel#proc аналогичен Proc.new. Обратите внимание proc это метод, а не литеральная(символьная) форма как -> или ключевое слово как yield.

Следующие две строчки производят одинаковый результат.

	short = proc {|a,b| a + b}
	puts short.call(2,3)

	long = Proc.new {|a,b| a + b}
	puts long.call(2,3)

Все готово!
Это все что касается блоков. Вы можете хотеть пересмотреть материал перечисления Array, один из наиболее распространенных примеров использования блоков в Ruby.



